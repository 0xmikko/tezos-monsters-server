{"version":3,"sources":["config.ts","store/utils/api.ts","store/auth/index.ts","store/utils/status.ts","store/auth/actions.ts","store/profile/actions.ts","store/profile/index.ts","store/operations/actions.ts","store/operations/index.ts","store/actions.ts","screens/WelcomeScreen/WelcomeScreen.tsx","components/Button/MagicButton.tsx","components/ThroughFade.tsx","screens/StoryScreen/StoryScreen.tsx","components/AppBar/AppBar.tsx","screens/Router.tsx","store/auth/reducer.ts","store/profile/reducer.ts","store/operations/reducer.ts","store/dataloader/details.ts","store/dataloader/index.ts","store/reducer.ts","store/middleware.js","store/socketMiddleware.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["BACKEND_ADDR","SSO_ADDR","getFullAPIAddress","url","params","host","decodeURI","startsWith","pos","undefined","key","value","LOGIN_SUCCESS","TOKEN_RECEIVED","LOGOUT","isAuthenticated","state","auth","refresh","exp","Date","getTime","isRefreshTokenExpired","STATUS","login","email","password","dispatch","a","json","JSON","stringify","authenticate","refreshAccessToken","token","RSAA","endpoint","method","body","headers","credentials","options","timeout","types","actionTypes","signup","createAction","getWebConnectCode","hash","socket","io","autoConnect","reconnection","forceNew","on","err","console","log","code","type","payload","access","localStorage","setItem","toString","actionsAfterAuth","emit","result","error","logout","clear","getTokenAtStartup","getItem","connectSocket","namespace","event","typeOnSuccess","getProfile","opHash","typeOnFailure","updateProfile","profile","addContract","id","updateStatus","status","OPERATION_PREFIX","updateOperationStatusByAction","action","FAILURE","response","respons","message","SUCCESS","operations","WelcomeScreen","Container","className","style","fontFamily","fontSize","color","href","fontWeight","MagicButton","title","onClick","Button","marginTop","marginBottom","width","backgroundColor","border","ThroughFade","children","useState","items","map","e","index","CSSTransition","in","appear","classNames","unmountOnExit","StoryScreen","fluid","position","zIndex","height","top","window","innerHeight","left","innerWidth","padding","justifyContent","Media","Body","src","Row","Col","xl","lg","md","sm","xs","backgroundImage","AppBar","useSelector","useDispatch","Navbar","Brand","Nav","Item","marginRight","marginLeft","Router","useEffect","actions","LOADING","exact","path","component","to","initialState","errors","signup_success","ACTIVE","webcode","name","avatar","createDataLoaderDetailsReducer","prefix","data","hashes","updateDetailState","newData","meta","UPDATING","combineReducers","jwtDecode","non_field_errors","statusText","UPDATE_NEEDED","createApiMiddleware","postponedRSAAs","getState","rsaaMiddleware","apiMiddleware","next","isRSAA","refreshToken","isAccessTokenExpired","push","length","nextAction","forEach","postponed","createSocketMiddleware","composeEnhancers","socketAuth","isConnecting","waitingPromises","getNamespace","jwtToken","Promise","resolve","reject","reconnectionDelay","jsonp","reconnectionAttempts","Infinity","transports","f","msg","Error","jwt","then","compose","store","createStore","reducer","applyMiddleware","thunk","Sentry","dsn","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d8b61b71.chunk.js","sourcesContent":["/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nexport const BACKEND_ADDR =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:4000\"\n    : \"http://localhost:4000\"\n\n  export const SSO_ADDR =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:4000\"\n    : \"http://localhost:4000\"\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {BACKEND_ADDR} from '../../config';\n\nexport const getFullAPIAddress = (\n  url: string,\n  params?: {[P in keyof string]: string[P]},\n  host: string = BACKEND_ADDR,\n) => {\n  // Decode URI if it was in %% format, it's important\n  // when we receive next_url in pagination\n  url = decodeURI(url);\n  url = url.startsWith('http://') ? url : host + url;\n  let pos = 0;\n  if (params !== undefined) {\n    for (let key in params) {\n      let value = params[key];\n      if (value) {\n        url += (pos === 0 ? '?' : '&') + key + '=' + value;\n        pos++;\n      }\n    }\n  }\n  return url;\n};\n\nexport const getApiById = (api: string, id?: string, params?: {[P in keyof string]: string[P]}) => {\n  if (api.includes(':id') && id !== undefined) {\n    api = api.replace(':id', id);\n  }\n\n  api += !api.endsWith('/') ? '/' : '';\n  return getFullAPIAddress(api, params);\n};\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {RootState} from '../index';\n\n// AUTH handlers\n\nexport const LOGIN_REQUEST = '@@auth/LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = '@@auth/LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = '@@auth/LOGIN_FAILURE';\n\nexport const SIGNUP_REQUEST = '@@auth/SIGNUP_REQUEST';\nexport const SIGNUP_SUCCESS = '@@auth/SIGNUP_SUCCESS';\nexport const SIGNUP_FAILURE = '@@auth/SIGNUP_FAILURE';\n\nexport const GETCODE_REQUEST = '@@auth/GETCODE_REQUEST';\nexport const GETCODE_SUCCESS = '@@auth/GETCODE_SUCCESS';\nexport const GETCODE_FAILURE = '@@auth/GETCODE_FAILURE';\n\nexport const TOKEN_REQUEST = '@@auth/TOKEN_REQUEST';\nexport const TOKEN_RECEIVED = '@@auth/TOKEN_RECEIVED';\nexport const TOKEN_FAILURE = '@@auth/TOKEN_FAILURE';\n\nexport const CLEAR_AUTH_DATA = '@@auth/CLEAR_AUTH_DATA';\nexport const LOGOUT = '@@auth/LOGOUT';\n\nexport function accessToken(state: RootState) {\n  if (state.auth.access) {\n    return state.auth.access.token;\n  }\n}\n\nexport function isAccessTokenExpired(state: RootState) {\n  if (state.auth.access && state.auth.access.exp) {\n    return 1000 * state.auth.access.exp - new Date().getTime() < 5000;\n  }\n  return true;\n}\n\nexport function refreshToken(state: RootState) {\n  if (state.auth.refresh) {\n    return state.auth.refresh.token;\n  }\n}\n\nexport function isRefreshTokenExpired(state: RootState): boolean {\n  if (state.auth.refresh && state.auth.refresh.exp) {\n    return 1000 * state.auth.refresh.exp - new Date().getTime() < 5000;\n  }\n  return true;\n}\n\nexport function isAuthenticated(state: RootState): boolean {\n  return !isRefreshTokenExpired(state);\n}\n\nexport function errors(state: RootState) {\n  return state.auth.errors;\n}\n\nexport function withAuth(headers = {}) {\n  return (state: RootState) => ({\n    ...headers,\n    Authorization: `Bearer ${accessToken(state)}`,\n  });\n}\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nexport enum STATUS {\n  UPDATE_NEEDED = 'STATUS: UPDATE_NEEDED',\n  ACTIVE = 'STATUS: ACTIVE',\n  LOADING = '@@status/LOADING',\n  UPDATING = '@@status/UPDATING',\n  SUCCESS = '@@status/SUCCESS',\n  FAILURE = '@@status/FAILURE',\n}\n\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\nimport {Action} from 'redux';\nimport {ThunkAction} from 'redux-thunk';\nimport {\n  createAction,\n  RSAA,\n  RSAAAction,\n  RSAAResultAction,\n} from 'redux-api-middleware';\nimport {getFullAPIAddress} from '../utils/api';\nimport * as actionTypes from './';\n\nimport {RootState} from '../index';\nimport {AuthPayload} from './reducer';\nimport {BACKEND_ADDR, SSO_ADDR} from '../../config';\nimport {actionsAfterAuth} from '../actions';\nimport io from 'socket.io-client';\nimport {GETCODE_SUCCESS, LOGIN_FAILURE, LOGIN_SUCCESS} from './';\n\nexport const login = (\n  email: string,\n  password: string,\n): ThunkAction<void, RootState, unknown, Action<string>> => async (\n  dispatch,\n) => {\n  const endpoint = '/auth/login/';\n  const json = JSON.stringify({email, password});\n\n  dispatch(authenticate(endpoint, json));\n};\n\n// Send request for refresh token\n\nexport const refreshAccessToken = (\n  token: string,\n): RSAAAction<any, AuthPayload, void> => ({\n  [RSAA]: {\n    endpoint: getFullAPIAddress('/auth/token/refresh/', undefined, SSO_ADDR),\n    method: 'POST',\n    body: JSON.stringify({refresh: token}),\n    headers: {'Content-Type': 'application/json'},\n    credentials: 'same-origin',\n    // @ts-ignore\n    options: {timeout: 10000},\n    types: [\n      actionTypes.TOKEN_REQUEST,\n      actionTypes.TOKEN_RECEIVED,\n      actionTypes.TOKEN_FAILURE,\n    ],\n  },\n});\n\nexport const signup = (\n  email: string,\n  password: string,\n): RSAAAction<any, AuthPayload, void> =>\n  createAction({\n    endpoint: getFullAPIAddress('/auth/signup/', undefined, SSO_ADDR),\n    method: 'POST',\n    body: JSON.stringify({email, password}),\n    headers: {'Content-Type': 'application/json'},\n    types: [\n      actionTypes.SIGNUP_REQUEST,\n      actionTypes.SIGNUP_SUCCESS,\n      actionTypes.SIGNUP_FAILURE,\n    ],\n  });\n\nexport const getWebConnectCode = (\n  hash?: string,\n): ThunkAction<void, RootState, unknown, Action<string>> => async (\n  dispatch,\n) => {\n  let socket = io(BACKEND_ADDR + '/webwait', {\n    autoConnect: true,\n    reconnection: true,\n    forceNew: true,\n  });\n\n  socket.on('connect_error', (err: string) => {\n    console.log(err);\n  });\n\n  socket.on('code', (code: string) => {\n    console.log(code);\n    dispatch({\n      type: GETCODE_SUCCESS,\n      payload: {\n        access: code,\n      },\n    });\n  });\n\n  socket.on('login', async (payload: AuthPayload) => {\n    console.log(payload);\n    if (payload.refresh === undefined) {\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload,\n      });\n      return;\n    }\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload,\n    });\n    localStorage.setItem('token', payload.refresh.toString());\n    await dispatch(actionsAfterAuth());\n  });\n\n  socket.on('disconnect', () => {\n    dispatch(getWebConnectCode());\n  });\n\n  socket.emit('getCode');\n};\n\n/*\n  Authenticate flow\n  @param endpoint\n  @param body\n */\nexport const authenticate = (\n  endpoint: string,\n  body: string,\n): ThunkAction<void, RootState, unknown, Action<string>> => async (\n  dispatch,\n) => {\n  const result = await dispatch<AuthPayload, void>(\n    createAction({\n      endpoint: getFullAPIAddress(endpoint, undefined, SSO_ADDR),\n      method: 'POST',\n      body: body,\n      headers: {'Content-Type': 'application/json'},\n      types: [\n        actionTypes.LOGIN_REQUEST,\n        actionTypes.LOGIN_SUCCESS,\n        actionTypes.LOGIN_FAILURE,\n      ],\n    }),\n  );\n\n  if (\n    result &&\n    !result.error &&\n    result.payload.refresh &&\n    result.type === actionTypes.LOGIN_SUCCESS\n  ) {\n    localStorage.setItem('token', result.payload.refresh.toString());\n    await dispatch(actionsAfterAuth());\n  }\n\n  console.log(result);\n};\n\nexport const logout = (): ThunkAction<\n  void,\n  RootState,\n  unknown,\n  Action<string>\n> => async (dispatch) => {\n  // Clear local storage at logout\n  await localStorage.clear();\n  dispatch({\n    type: actionTypes.LOGOUT,\n  });\n\n  dispatch({\n    type: 'PROFILE_LOGOUT',\n  })\n};\n\nexport const getTokenAtStartup = (): ThunkAction<\n  void,\n  RootState,\n  unknown,\n  Action<string>\n> => async (dispatch) => {\n  const token =localStorage.getItem('token');\n\n  if (token) {\n    const result = await dispatch(refreshAccessToken(token));\n    if (\n      !result.error &&\n      result.payload.refresh &&\n      result.type === actionTypes.TOKEN_RECEIVED\n    ) {\n      await dispatch(actionsAfterAuth());\n    }\n  }\n};\n\ndeclare module 'redux-thunk' {\n  /*\n   * Overload to add api middleware support to Redux's dispatch() function.\n   * Useful for react-redux or any other library which could use this type.\n   */\n\n  interface ThunkDispatch<S, E, A extends Action> {\n    <T extends A>(action: T): T;\n    <R>(asyncAction: ThunkAction<R, S, E, A>): R;\n    <Payload, Meta>(action: RSAAAction<any, Payload, Meta>): Promise<\n      RSAAResultAction<Payload, Meta>\n    >;\n  }\n}\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {ThunkAction} from 'redux-thunk';\nimport {Action} from 'redux';\nimport {RootState} from '../index';\nimport {updateStatus} from '../operations/actions';\nimport {createAction} from 'redux-api-middleware';\nimport {STATUS} from '../utils/status';\nimport {namespace} from './index';\nimport {getFullAPIAddress} from '../utils/api';\nimport {withAuth} from '../auth';\nimport {Profile} from '../../core/profile';\nimport {SocketEmitAction} from '../socketMiddleware';\n\nexport const connectSocket = (): ThunkAction<\n  void,\n  RootState,\n  unknown,\n  Action<string>\n> => async (dispatch) => {\n  dispatch({\n    type: 'SOCKET_ON',\n    namespace,\n    event: 'profile:updateDetails',\n    typeOnSuccess: 'PROFILE_SUCCESS',\n  });\n};\n\nexport const getProfile: (opHash: string) => SocketEmitAction = (opHash) => ({\n  type: 'SOCKET_EMIT',\n  namespace,\n  event: 'profile:retrieve',\n  typeOnFailure: 'PROFILE_FAILURE',\n  payload: undefined,\n  opHash,\n});\n\nexport const updateProfile: (\n  profile: Profile,\n  opHash?: string,\n) => SocketEmitAction = (profile, opHash) => ({\n  type: 'SOCKET_EMIT',\n  namespace,\n  event: 'profile:update',\n  typeOnFailure: 'PROFILE_FAILURE',\n  payload: profile,\n  opHash,\n});\n\nexport const addContract: (id: string, opHash?: string) => SocketEmitAction = (\n  id,\n  opHash,\n) => ({\n  type: 'SOCKET_EMIT',\n  namespace,\n  event: 'profile:new_contact',\n  typeOnFailure: 'PROFILE_FAILURE',\n  payload: { id },\n  opHash,\n});\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\nimport {Profile} from '../../core/profile';\nexport const namespace = 'profile';\nexport const endpoint = '/api/profile/';\nexport type ProfileActions = {\n  type: 'PROFILE_REQUEST' | 'PROFILE_SUCCESS' | 'PROFILE_FAILURE' | 'PROFILE_LOGOUT';\n  payload?: Profile;\n  error?: boolean;\n};\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {Action} from 'redux';\nimport {namespace, OPERATION_PREFIX} from './index';\nimport {DETAIL_SUCCESS, LIST_SUCCESS} from '../dataloader';\nimport {ThunkAction} from 'redux-thunk';\nimport {RootState} from '../index';\nimport {STATUS} from '../utils/status';\n\nexport const updateStatus = (\n  opHash: string,\n  status: STATUS,\n  error?: string,\n) => ({\n  type: OPERATION_PREFIX + DETAIL_SUCCESS,\n  payload: {\n    id: opHash,\n    status,\n    error,\n  },\n});\n\nexport const updateOperationStatusByAction = (\n  action: any,\n  opHash: string,\n): Action<string> => {\n  if (action === undefined || action.error) {\n    console.log(action);\n\n    return updateStatus(\n      opHash || '0',\n      STATUS.FAILURE,\n      // @ts-ignore\n      action === undefined ? 'Network error' : action.payload.response ? action.payload.respons.error : action.payload.message,\n    );\n  }\n  return updateStatus(opHash || '0', STATUS.SUCCESS);\n};\n\nexport const connectSocket = (): ThunkAction<\n  void,\n  RootState,\n  unknown,\n  Action<string>\n> => async (dispatch) => {\n  dispatch({\n    type: 'SOCKET_ON',\n    namespace,\n    event: 'operations:update',\n    typeOnSuccess: OPERATION_PREFIX + DETAIL_SUCCESS,\n  });\n};\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {STATUS} from \"../utils/status\";\n\nexport interface Operation {\n    id: string,\n    status: STATUS,\n    error?: string,\n}\n\nexport const namespace = 'operations';\nexport const OPERATION_PREFIX = 'OPERATIONS@@';\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport * as auth from './auth/actions';\n// import * as chats from './chats/actions';\n// import * as contacts from './contacts/actions';\nimport * as profile from './profile/actions';\nimport * as operations from './operations/actions';\nimport {ThunkAction} from 'redux-thunk';\nimport {RootState} from './index';\nimport {Action} from 'redux';\n\nexport default {\n  auth,\n  // chats,\n  // contacts,\n  profile,\n  operations,\n};\n\n// Connect socket connects redux with socket server interface\nexport const actionsAfterAuth = (): ThunkAction<\n  void,\n  RootState,\n  unknown,\n  Action<string>\n> => async (dispatch) => {\n  // Connect sockets to listen server events\n  dispatch(profile.connectSocket());\n  dispatch(profile.getProfile('actionsAfterAuth'));\n  dispatch(operations.connectSocket());\n  // dispatch(chats.connectSocket());\n  // dispatch(contacts.connectSocket());\n\n  console.log('[SOCKET.IO]: All listeners connected!');\n};\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport \"./WelcomeScreen.css\";\nimport text_mf from \"./text_mf.svg\";\n\nexport const WelcomeScreen: React.FC = () => {\n  return (\n    <Container className=\"welcome-screen\">\n      <div className=\"title\">\n        {\" \"}\n        <span\n          style={{\n            fontFamily: \"Godzilla\",\n            fontSize: \"100pt\",\n            color: \"#ffb600\",\n          }}\n        >\n          Monsters Factory!\n        </span><br/>\n        <a href=\"/story\">\n        <span\n          style={{\n            fontFamily: \"Blackhead\",\n            fontSize: \"50pt\",\n            color: \"#fff\",\n            fontWeight: 1000,\n          }}\n        >\n          Get started! It's free!\n        </span></a>\n      </div>\n    </Container>\n  );\n};\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nexport interface MagicButtonProps {\n    title: string;\n    onClick?: () => void;\n}\n\nexport const MagicButton : React.FC<MagicButtonProps> = ({title, onClick}) => {\n    return <Button onClick={onClick} style={style}>{title}</Button>\n}\n\nconst style = {\n    marginTop: '10px',\n    marginBottom: '10px',\n    width: '80%',\n    backgroundColor: '#6f1b1b',\n    fontFamily: 'SansSerif',\n    fontSize: '20px',\n    border: '1px solid black',\n    \n}\n","import {\n  CSSTransition,\n  Transition,\n  TransitionGroup,\n} from \"react-transition-group\";\nimport React, { useState } from \"react\";\nimport \"./ThroughFade.css\";\nimport { Button } from \"react-bootstrap\";\n\nexport const ThroughFade: React.FC = ({ children }) => {\n  const [items, setItems] = useState([\"sss\"]);\n  const [ing, setIng] = useState(true);\n\n  const onPress = () => {\n    setItems([...items, \"QQQQ\"]);\n    setIng(!ing);\n    console.log(items);\n  };\n\n  const itemsRendered = items.map((e, index) => <h1 key={index}>{e}</h1>);\n\n  return (\n    <CSSTransition\n      in={true}\n      timeout={2000}\n      appear={\"example\"}\n      classNames=\"example\"\n      unmountOnExit\n    >\n      <div>{children}</div>\n    </CSSTransition>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {Container, Row, Col, Button, Media} from \"react-bootstrap\";\nimport \"./StoryScreen.css\";\nimport { MagicButton } from \"../../components/Button/MagicButton\";\nimport { ThroughFade } from \"../../components/ThroughFade\";\n\nexport const StoryScreen: React.FC = () => {\n  return (\n\n    <Container fluid style={{ backgroundColor: \"#000\" }}>\n      <div style={{\n          position: 'absolute',\n          zIndex: 900,\n          width: 500,\n          height: 250,\n          top: window.innerHeight/2-100,\n          left: window.innerWidth/2 - 250,\n          backgroundColor: '#310e0e',\n          border: '10px solid white',\n          padding: '20px',\n          justifyContent: 'center'\n      }}>\n          <Media>\n            <Media.Body>\n          <img src={'/images/wrong.png'} height={150} />\n            </Media.Body>\n              <Media.Body>\n                  <h3 style={{color: '#fab70dff'}}>You are wrong</h3>\n              </Media.Body>\n          </Media>\n      </div>\n<ThroughFade>\n        <Container fluid>\n          <Row>\n            <Col\n              xl={6}\n              lg={6}\n              md={6}\n              sm={6}\n              xs={6}\n              className={\"page1\"}\n              style={{ padding: 0, backgroundImage: 'url(/images/p1.jpg)' }}\n            >\n              {/* { leftImage } */}\n            </Col>\n            <Col xl={6} lg={6} md={6} sm={6} xs={6} className={\"page2\"}>\n              <h2>Far, far away...</h2>\n                <p > It was</p>\n                <p>Your assets:</p>\n                <p>- No money</p>\n                <p>- A dream to kiss a Queen</p>\n                <p>- A lot of energy</p>\n\n              <MagicButton title=\"Become a Tezos developer & earn millions\" /><br/>\n              <MagicButton title=\"Go to boring job\"/>\n            </Col>\n          </Row>\n        </Container>\n</ThroughFade>\n    </Container>\n  );\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React from \"react\";\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { isAuthenticated } from \"../../store/auth\";\nimport actions from \"../../store/actions\";\nimport { AppBarElement } from \"./AppBarElement\";\nimport logo from \"./logo.png\";\nimport \"./AppBar.css\";\n\n// import AppSearch from \"./AppSearch\"\n\nexport const AppBar = () => {\n  const isSignIn = useSelector((state: RootState) => isAuthenticated(state));\n\n  const dispatch = useDispatch();\n\n  const onLogout = () => dispatch(actions.auth.logout());\n\n  return (\n    <Navbar className=\"navbar-header navbar-header-fixed woodBar\">\n      <Navbar.Brand>\n        <span\n          style={{\n            fontFamily: \"Godzilla\",\n            color: \"#fff\",\n            marginTop: \"-40px\",\n          }}\n        >\n          Monsters Factory\n        </span>\n      </Navbar.Brand>\n      <Nav style={{ justifyContent: \"right\", width: '100%', color: '#fff' }}>\n          <Nav.Item>\n              <img src={\"/images/gold.png\"} height={30} style={{marginTop: -10, marginRight: 20,}}/>\n              <span\n                  style={{\n                      fontFamily: \"Godzilla\",\n                      color: \"#fff\",\n                      marginTop: \"-40px\",\n                      fontSize: 30,\n                  }}\n              >\n          500\n        </span>\n              <img src={\"/images/share.png\"} height={30} style={{marginTop: -10, marginLeft: 30, marginRight: 20,}}/>\n              <span\n                  style={{\n                      fontFamily: \"Godzilla\",\n                      color: \"#fff\",\n                      marginTop: \"-40px\",\n                      fontSize: 30,\n                  }}\n              >\n          0\n        </span>\n          </Nav.Item>\n      </Nav>\n    </Navbar>\n  );\n};\n\nexport default AppBar;\n","import React, { useEffect } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport actions from \"../store/actions\";\nimport { RootState } from \"../store\";\nimport { STATUS } from \"../store/utils/status\";\nimport { WelcomeScreen } from \"./WelcomeScreen/WelcomeScreen\";\nimport { StoryScreen } from \"./StoryScreen/StoryScreen\";\nimport AppBar from \"../components/AppBar/AppBar\";\n\nexport const Router: React.FC = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(actions.auth.getTokenAtStartup());\n  }, []);\n\n  const { status } = useSelector((state: RootState) => state.auth);\n\n  switch (status) {\n    default:\n    case STATUS.LOADING:\n    case STATUS.FAILURE:\n      return (\n        <>\n          <AppBar />\n          <Switch>\n            <Route exact path=\"/\" component={WelcomeScreen} />\n            <Route exact path=\"/story\" component={StoryScreen} />\n\n            <Route path={\"*\"}>\n              <Redirect to={\"/story\"} />\n            </Route>\n          </Switch>\n        </>\n      );\n    case STATUS.SUCCESS:\n      return <div>Hello</div>;\n  }\n};\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport jwtDecode from 'jwt-decode';\nimport * as auth from './';\nimport {STATUS} from '../utils/status';\n\ninterface TokenDTO {\n  token: string;\n  user_id: string;\n  exp: number;\n}\n\ninterface AuthStateType {\n  access?: TokenDTO;\n  refresh?: TokenDTO;\n  errors: {};\n  signup_success: boolean;\n  status: STATUS;\n  webcode?: string;\n}\n\nexport interface AuthPayload {\n  access: string;\n  refresh?: string;\n  errors: string;\n  response?: string;\n  statusText?: string;\n}\n\nexport interface GetCodePayload {\n code: string\n}\n\nexport interface AuthActionsType {\n  type: string;\n  payload: AuthPayload;\n}\n\nexport interface GetCodeActionsType {\n  type: string;\n  payload: AuthPayload;\n}\n\nconst initialState: AuthStateType = {\n  access: undefined,\n  refresh: undefined,\n  errors: {},\n  signup_success: false,\n  status: STATUS.ACTIVE,\n  webcode: '',\n};\n\nexport default (\n  state: AuthStateType = initialState,\n  action: AuthActionsType,\n): AuthStateType => {\n  console.log(action);\n\n  switch (action.type) {\n    case auth.LOGIN_SUCCESS:\n    case auth.TOKEN_RECEIVED:\n      return {\n        ...state,\n        access: {\n          ...jwtDecode<TokenDTO>(action.payload.access),\n          token: action.payload.access,\n        },\n        refresh: {\n          ...jwtDecode<TokenDTO>(action.payload.refresh || ''),\n          token: action.payload.refresh || '',\n        },\n        // profile: undefined,\n        // isVerified: undefined,\n        errors: {},\n        status: STATUS.SUCCESS,\n      };\n\n    case auth.TOKEN_FAILURE:\n    case auth.LOGIN_FAILURE:\n      return {\n        ...state,\n        access: undefined,\n        refresh: undefined,\n        errors: action.payload.response || {\n          non_field_errors: action.payload.statusText,\n        },\n      };\n\n    case auth.SIGNUP_FAILURE:\n      return {\n        ...state,\n        access: undefined,\n        refresh: undefined,\n        errors: action.payload.response || {\n          non_field_errors: action.payload.statusText,\n        },\n        status: STATUS.FAILURE,\n      };\n\n    case auth.LOGOUT:\n      return {\n        ...state,\n        access: undefined,\n        refresh: undefined,\n        status: STATUS.UPDATE_NEEDED,\n      };\n\n    case auth.SIGNUP_SUCCESS:\n      return {\n        ...state,\n        signup_success: true,\n        status: STATUS.SUCCESS,\n      };\n\n    case auth.GETCODE_SUCCESS:\n      return {\n        ...state,\n        webcode: action.payload.access,\n      };\n    default:\n      return state;\n  }\n};\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {Profile} from '../../core/profile';\nimport {ProfileActions} from './';\n\nexport interface ProfileState extends Profile {}\n\nconst initialState: ProfileState = {\n  id: '',\n  name: 'Loading',\n  avatar: '',\n};\n\n\nexport default function createReducer(\n  state: ProfileState = initialState,\n  action: ProfileActions,\n): ProfileState {\n  switch (action.type) {\n    case 'PROFILE_REQUEST':\n      return state;\n    case 'PROFILE_SUCCESS':\n      return action ? action.payload ? action.payload : state : state;\n    case 'PROFILE_FAILURE':\n      return {\n        ...state,\n      };\n    case 'PROFILE_LOGOUT':\n      return initialState;\n  }\n\n  return state;\n}\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {Operation, OPERATION_PREFIX} from './';\n\nimport {createDataLoaderDetailsReducer} from '../dataloader/details';\n\nexport default createDataLoaderDetailsReducer<Operation>(OPERATION_PREFIX);\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {DataLoaderDetailsActions} from './types';\nimport * as actionTypes from './index';\nimport {STATUS} from '../utils/status';\nimport {DataItem, DataObjectWithID} from './reducer';\n\nexport type DataLoaderDetailsState<T> = {\n  data: Record<string, DataItem<T>>;\n  hashes: Record<string, DataItem<T>>;\n};\n\nexport function createDataLoaderDetailsReducer<T extends DataObjectWithID>(\n  prefix: string = '',\n) {\n  const initialState: DataLoaderDetailsState<T> = {\n    data: {},\n    hashes: {},\n  };\n\n  return function (\n    state: DataLoaderDetailsState<T> = initialState,\n    action: DataLoaderDetailsActions<T>,\n  ): DataLoaderDetailsState<T> {\n    const updateDetailState = (\n      state: DataLoaderDetailsState<T>,\n      id: string,\n      hash: string,\n      newData: DataItem<T>,\n    ): DataLoaderDetailsState<T> => ({\n      ...state,\n      data: {\n        ...state.data,\n        [id]: newData,\n      },\n      hashes: {\n        ...state.hashes,\n        [hash]: newData,\n      },\n    });\n\n    let id = '-';\n    if (action.payload !== undefined && action.payload.id !== undefined) {\n      id = action.payload.id;\n    }\n    if (action.meta !== undefined && action.meta.id !== undefined) {\n      id = action.meta.id;\n    }\n\n    const hash = \"\";\n\n    switch (action.type) {\n      case prefix + actionTypes.DETAIL_REQUEST:\n        return updateDetailState(state, id, hash, {status: STATUS.LOADING});\n\n      case prefix + actionTypes.UPLOAD_REQUEST:\n        return updateDetailState(state, id, hash, {\n          ...state.data[id],\n          status: STATUS.UPDATING,\n        });\n\n      case prefix + actionTypes.DETAIL_SUCCESS:\n      case prefix + actionTypes.UPLOAD_SUCCESS:\n        return updateDetailState(state, id, hash, {\n          data: action.payload,\n          status: STATUS.SUCCESS,\n        });\n\n      case prefix + actionTypes.DETAIL_FAILURE:\n      case prefix + actionTypes.UPLOAD_FAILURE:\n        return updateDetailState(state, id, hash, {\n          data: undefined,\n          status: STATUS.FAILURE,\n        });\n\n      default:\n        return state;\n    }\n  };\n}\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {DataItem} from \"./reducer\";\nimport {DataLoaderDetailsState} from \"./details\";\n\nexport const LIST_REQUEST = 'LIST_REQUEST';\nexport const LIST_UPDATE = 'LIST_UPDATE';\nexport const LIST_SUCCESS = 'LIST_SUCCESS';\nexport const LIST_FAILURE = 'LIST_FAILURE';\n\nexport const DETAIL_REQUEST = 'DETAIL_REQUEST';\nexport const DETAIL_UPDATE = 'DETAIL_UPDATE';\nexport const DETAIL_SUCCESS = 'DETAIL_SUCCESS';\nexport const DETAIL_FAILURE = 'DETAIL_FAILURE';\n\nexport const UPLOAD_REQUEST = 'UPLOAD_REQUEST';\nexport const UPLOAD_SUCCESS = 'UPLOAD_SUCCESS';\nexport const UPLOAD_FAILURE = 'UPLOAD_FAILURE';\n\nexport function getDetailsItem<T>(data: DataLoaderDetailsState<T>, id: string) : DataItem<T> | undefined {\n    if (!data || !data.data[id]) return undefined;\n    return data.data[id]\n\n}\n\n\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {combineReducers} from 'redux';\nimport auth from './auth/reducer';\n// import chats from './chats/reducer';\n// import contacts from './contacts/reducer';\nimport profile from './profile/reducer';\nimport operations from './operations/reducer';\n\nexport default combineReducers({\n  auth,\n  // chats,\n  // contacts,\n  profile,\n  operations,\n});\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {apiMiddleware, isRSAA} from 'redux-api-middleware';\n\nimport {isAccessTokenExpired, refreshToken, TOKEN_RECEIVED} from './auth';\nimport {refreshAccessToken} from './auth/actions';\n\nexport function createApiMiddleware() {\n  let postponedRSAAs = [];\n\n  return ({dispatch, getState}) => {\n    const rsaaMiddleware = apiMiddleware({dispatch, getState});\n\n    return (next) => (action) => {\n      console.log('DISPATCH RSAA', action);\n\n      const nextCheckPostoned = (nextAction) => {\n        // Run postponed actions after token refresh\n        if (nextAction.type === TOKEN_RECEIVED) {\n          next(nextAction);\n          postponedRSAAs.forEach((postponed) => {\n            rsaaMiddleware(next)(postponed);\n          });\n          postponedRSAAs = [];\n        } else {\n          next(nextAction);\n        }\n      };\n\n      if (isRSAA(action)) {\n        const state = getState(),\n          token = refreshToken(state);\n\n        if (token && isAccessTokenExpired(state)) {\n          postponedRSAAs.push(action);\n          if (postponedRSAAs.length === 1) {\n            return rsaaMiddleware(nextCheckPostoned)(refreshAccessToken(token));\n          } else {\n            return;\n          }\n        }\n\n        return rsaaMiddleware(next)(action);\n      }\n      return next(action);\n    };\n  };\n}\n\nexport default createApiMiddleware();\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport io from 'socket.io-client';\nimport {RootState} from './index';\nimport {ThunkDispatch, ThunkMiddleware} from 'redux-thunk';\nimport {Action, MiddlewareAPI, Dispatch} from 'redux';\nimport {BACKEND_ADDR} from '../config';\nimport {actionsAfterAuth} from './actions';\n// import {namespace} from './companies';\n\n// interface ThunkMiddleware {\n//   dispatch: ThunkDispatch<RootState, unknown, Action<string>>;\n//   getState: () => RootState;\n// }\n\nexport interface JwtData {\n  message: string;\n  code: string;\n  type: string;\n}\n\nexport interface SocketEmitAction {\n  type: 'SOCKET_EMIT';\n  event: string;\n  payload: unknown;\n  typeOnFailure: string;\n  opHash?: string;\n}\n\nexport interface SocketOnAction {\n  type: 'SOCKET_ON';\n  event: string;\n  typeOnSuccess: string;\n}\n\nexport interface SocketOffAction {\n  type: 'SOCKET_OFF';\n}\n/**\n * An Error Object used by the package.\n */\ninterface UnauthorizedError {\n  message: string;\n  inner: Error;\n  data: JwtData;\n}\n\ntype resolver = (value?: SocketIOClient.Socket | undefined) => void;\n\nexport function createSocketMiddleware(): ThunkMiddleware<\n  RootState,\n  Action<string>,\n  Action<string>\n> {\n  let socketAuth: SocketIOClient.Socket | undefined = undefined;\n  let isConnecting: boolean = false;\n  let waitingPromises: resolver[] = [];\n\n  /*\n   * getNamespace returns promise for connected and authentificated namespace\n   */\n  const getNamespace: (\n    jwtToken: string,\n    dispatch: Dispatch,\n  ) => Promise<SocketIOClient.Socket> = (jwtToken, dispatch) => {\n    return new Promise<SocketIOClient.Socket>((resolve, reject) => {\n      if (socketAuth !== undefined) {\n        resolve(socketAuth);\n        return;\n      }\n\n      console.log('CONNE23G', jwtToken);\n\n      // If connection in progress we add resolver in queue\n      if (isConnecting || jwtToken === undefined) {\n        waitingPromises.push(resolve);\n        return;\n      } else {\n        isConnecting = true;\n        waitingPromises = [];\n      }\n\n      console.log(`CONNECTING!!!! TO ${BACKEND_ADDR}`);\n      let socket = io(BACKEND_ADDR + '/web', {\n        reconnection: true,\n        reconnectionDelay: 500,\n        jsonp: false,\n        reconnectionAttempts: Infinity,\n        transports: ['websocket'],\n      });\n\n      socket.on('connect_error', (err: string) => {\n        console.log(err);\n      });\n\n      socket\n        .emit('authenticate', {token: jwtToken}) //send the jwt\n        .on('authenticated', () => {\n          socketAuth = socket;\n          isConnecting = false;\n          console.log('CONNECTED', socketAuth);\n          // @ts-ignore\n          dispatch(actionsAfterAuth());\n          resolve(socket);\n\n          for (const f of waitingPromises) {\n            f(socket);\n          }\n        })\n        .on('unauthorized', (msg: UnauthorizedError) => {\n          console.log(`ERROR unauthorized: ${JSON.stringify(msg.data)}`);\n          reject(msg.data.code);\n          throw new Error(msg.data.type);\n        })\n        .on('disconnect', () => {\n          console.log('DISCONNECTED!');\n          if (socketAuth) socketAuth = undefined;\n        });\n    });\n  };\n\n  /*\n   ** Middleware gets connection and emits new request or start to listen on\n   */\n\n  return ({dispatch, getState}) => {\n    return (next: Dispatch) => (\n      action: SocketEmitAction | SocketOnAction | SocketOffAction,\n    ) => {\n      const access = getState().auth.access\n      const jwt = access === undefined ? undefined : access.token;\n\n      console.log('DISPATCH', action);\n      switch (action.type) {\n        case 'SOCKET_EMIT':\n          if (jwt) {\n            getNamespace(jwt, dispatch).then((socket) => {\n              socket.emit(action.event, action.payload, action.opHash);\n              console.log(\n                `[SOCKET.IO] : EMIT : ${action.event} with opHash ${action.opHash}`,\n              );\n            });\n          } else {\n            dispatch({type: action.typeOnFailure});\n          }\n\n          return next(action);\n\n        case 'SOCKET_ON':\n          if (jwt) {\n            getNamespace(jwt, dispatch).then((socket) => {\n              socket.on(action.event, (payload: any) => {\n                console.log('[SOCKET.IО] : GET NEW INFO : ', payload);\n                dispatch({\n                  type: action.typeOnSuccess,\n                  payload: payload,\n                });\n              });\n              console.log('[SOCKET.IO] : LISTENER ADDED : ', action.event);\n            });\n          } else {\n            console.log('Cant connect');\n          }\n          return next(action);\n\n        case 'SOCKET_OFF':\n          socketAuth = undefined;\n          isConnecting = false;\n          waitingPromises = [];\n          return next(action);\n\n        default:\n          console.log('NEXT', action);\n          return next(action);\n      }\n    };\n  };\n}\n\nexport default createSocketMiddleware();\n","/*\n * Buzzzchat - P2P Chat based on Bluzelle DB\n * Copyright (c) 2020. Mikhail Lazarev\n */\n\nimport {applyMiddleware, compose, createStore} from 'redux';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport createApiMiddleware from './middleware';\nimport createSocketMiddleware from './socketMiddleware';\n\nlet composeEnhancers: typeof compose;\n\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  composeEnhancers = composeWithDevTools({});\n} else {\n  composeEnhancers = compose;\n}\n\nexport type RootState = ReturnType<typeof reducer>;\n\nexport default function configureStore() {\n  return createStore(\n    reducer,\n    composeEnhancers(\n      applyMiddleware(thunk,\n          createSocketMiddleware,\n          createApiMiddleware),\n    ),\n  );\n}\n","import React, { useState } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as Sentry from \"@sentry/browser\";\n\nimport { Router } from \"./screens/Router\";\nimport configureStore from \"./store\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\n\nconst store = configureStore();\n\n// Sentry\nif (process.env.NODE_ENV === \"production\") {\n  Sentry.init({\n    dsn: \"https://cd19416ad99349d0bc8df4b50b374d4e@sentry.io/3026714\",\n  });\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Router />\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}